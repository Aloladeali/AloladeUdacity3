version: 2.1  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
              cd ~/project/backend
              npm install
              npm run migrations:revert
              
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt intall ansible -y

  install-nodejs:
    description: install-node.js.13
    steps:
      - run:
          name: install-node.js.13
          command: |
            curl fsSL http://deb.nodesource.com/setup_13.x | sudo - bash -
            sudo apt install -y nodejs

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Build back-end
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Test front-end
          command: |
              cd frontend
              npm install
              npm run test 

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Test back-end
          command: |
              cd frontend
              npm install
              npm run test 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Analyze front-end
          command: |
              cd frontend
              npm install
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Analyze back-end
          command: |
              cd backend
              npm install
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["b2:60:aa:d0:f8:bb:21:ca:bd:91:27:a4:73:bb:72:b0"]
      # attach workspace
      - attach_workspace:
          at: ~/
          paths:
            - project/ .circleci/ansible/inventtory.txt
      - run:
          name: Install tar gzip
          command: |
            apk add --update --no-cache tar gzip ansible
            pip install awscli
      - run:
          name: Install openssh
          command: |
            apk add --update openssh-server
      - run:
          name: View content of inventory.txt
          command: cat .circleci/ansible/inventory.txt    
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml      
      # Here's where you will add some code to rollback on failure
      - destroy-environment
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}

     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install-nodejs
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "workfkow=$CIRCLE_WORKFLOW_ID:0:7"
      - destroy-environment
      - revert-migrations
 deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli      
      - install_ansible
      - install-nodejs
      - add_ssh_keys:
          fingerprints: ["5e:8b:bc:bb:1b:08:ab:90:53:83:06:d4:18:a7:b2:b9"]          
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
         name: Package Backend
         command: |
            cd backend
            npm run build
            tar -cf artifact.tar
            cd ..
            cp backend/artifact.tar .circleci/ansible/roles/deploy/files   
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}             
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml       
      - destroy-environment
      - revert-migrations
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
            